<?php
/**
 * WebhookCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VonageIntegrationSuite
 *
 * __VonageÂ® Integration Suite__ powered by __gUnify&trade;__.  --------------------------------
 *
 * OpenAPI spec version: v1
 * Contact: gunifydevops@vonage.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.vonage.client.model.VonageIntegrationSuite;

use \ArrayAccess;

/**
 * WebhookCreate Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WebhookCreate implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'WebhookCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'url' => 'string',
        'events' => 'string[]',
        'signing_algo' => 'string',
        'signing_key' => 'string',
        'metadata_policy' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'url' => 'url',
        'events' => 'events',
        'signing_algo' => 'signingAlgo',
        'signing_key' => 'signingKey',
        'metadata_policy' => 'metadataPolicy'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'url' => 'setUrl',
        'events' => 'setEvents',
        'signing_algo' => 'setSigningAlgo',
        'signing_key' => 'setSigningKey',
        'metadata_policy' => 'setMetadataPolicy'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'url' => 'getUrl',
        'events' => 'getEvents',
        'signing_algo' => 'getSigningAlgo',
        'signing_key' => 'getSigningKey',
        'metadata_policy' => 'getMetadataPolicy'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const SIGNING_ALGO_SHA256 = 'HMAC_SHA256';
    const METADATA_POLICY_NONE = 'NONE';
    const METADATA_POLICY_HEADER = 'HEADER';
    const METADATA_POLICY_BODY = 'BODY';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEventsAllowableValues()
    {
        return [
            
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSigningAlgoAllowableValues()
    {
        return [
            self::SIGNING_ALGO_SHA256,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMetadataPolicyAllowableValues()
    {
        return [
            self::METADATA_POLICY_NONE,
            self::METADATA_POLICY_HEADER,
            self::METADATA_POLICY_BODY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['signing_algo'] = isset($data['signing_algo']) ? $data['signing_algo'] : null;
        $this->container['signing_key'] = isset($data['signing_key']) ? $data['signing_key'] : null;
        $this->container['metadata_policy'] = isset($data['metadata_policy']) ? $data['metadata_policy'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array();
        if (!in_array($this->container['events'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'events', must be one of #{allowed_values}.";
        }
        $allowed_values = array("HMAC_SHA256");
        if (!in_array($this->container['signing_algo'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'signing_algo', must be one of #{allowed_values}.";
        }
        $allowed_values = array("NONE", "HEADER", "BODY");
        if (!in_array($this->container['metadata_policy'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'metadata_policy', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array();
        if (!in_array($this->container['events'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("HMAC_SHA256");
        if (!in_array($this->container['signing_algo'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("NONE", "HEADER", "BODY");
        if (!in_array($this->container['metadata_policy'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets events
     * @return string[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     * @param string[] $events
     * @return $this
     */
    public function setEvents($events)
    {
        $allowed_values = array();
        if (!in_array($events, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'events', must be one of ");
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets signing_algo
     * @return string
     */
    public function getSigningAlgo()
    {
        return $this->container['signing_algo'];
    }

    /**
     * Sets signing_algo
     * @param string $signing_algo
     * @return $this
     */
    public function setSigningAlgo($signing_algo)
    {
        $allowed_values = array('HMAC_SHA256');
        if (!in_array($signing_algo, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'signing_algo', must be one of 'HMAC_SHA256'");
        }
        $this->container['signing_algo'] = $signing_algo;

        return $this;
    }

    /**
     * Gets signing_key
     * @return string
     */
    public function getSigningKey()
    {
        return $this->container['signing_key'];
    }

    /**
     * Sets signing_key
     * @param string $signing_key
     * @return $this
     */
    public function setSigningKey($signing_key)
    {
        $this->container['signing_key'] = $signing_key;

        return $this;
    }

    /**
     * Gets metadata_policy
     * @return string
     */
    public function getMetadataPolicy()
    {
        return $this->container['metadata_policy'];
    }

    /**
     * Sets metadata_policy
     * @param string $metadata_policy
     * @return $this
     */
    public function setMetadataPolicy($metadata_policy)
    {
        $allowed_values = array('NONE', 'HEADER', 'BODY');
        if (!in_array($metadata_policy, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'metadata_policy', must be one of 'NONE', 'HEADER', 'BODY'");
        }
        $this->container['metadata_policy'] = $metadata_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


