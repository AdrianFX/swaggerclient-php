<?php
/**
 * WebhookStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VonageIntegrationSuite
 *
 * __VonageÂ® Integration Suite__ powered by __gUnify&trade;__.  --------------------------------
 *
 * OpenAPI spec version: v1
 * Contact: gunifydevops@vonage.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.vonage.client.model.VonageIntegrationSuite;

use \ArrayAccess;

/**
 * WebhookStatistics Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WebhookStatistics implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Webhook_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'total_attempts' => 'int',
        'total_successes' => 'int',
        'total_failures' => 'int',
        'failed' => 'bool',
        'last_success' => 'string',
        'last_failure' => 'string',
        'last_http_error_code' => 'string',
        'last_error_message' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'total_attempts' => 'totalAttempts',
        'total_successes' => 'totalSuccesses',
        'total_failures' => 'totalFailures',
        'failed' => 'failed',
        'last_success' => 'lastSuccess',
        'last_failure' => 'lastFailure',
        'last_http_error_code' => 'lastHttpErrorCode',
        'last_error_message' => 'lastErrorMessage'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'total_attempts' => 'setTotalAttempts',
        'total_successes' => 'setTotalSuccesses',
        'total_failures' => 'setTotalFailures',
        'failed' => 'setFailed',
        'last_success' => 'setLastSuccess',
        'last_failure' => 'setLastFailure',
        'last_http_error_code' => 'setLastHttpErrorCode',
        'last_error_message' => 'setLastErrorMessage'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'total_attempts' => 'getTotalAttempts',
        'total_successes' => 'getTotalSuccesses',
        'total_failures' => 'getTotalFailures',
        'failed' => 'getFailed',
        'last_success' => 'getLastSuccess',
        'last_failure' => 'getLastFailure',
        'last_http_error_code' => 'getLastHttpErrorCode',
        'last_error_message' => 'getLastErrorMessage'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_attempts'] = isset($data['total_attempts']) ? $data['total_attempts'] : null;
        $this->container['total_successes'] = isset($data['total_successes']) ? $data['total_successes'] : null;
        $this->container['total_failures'] = isset($data['total_failures']) ? $data['total_failures'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['last_success'] = isset($data['last_success']) ? $data['last_success'] : null;
        $this->container['last_failure'] = isset($data['last_failure']) ? $data['last_failure'] : null;
        $this->container['last_http_error_code'] = isset($data['last_http_error_code']) ? $data['last_http_error_code'] : null;
        $this->container['last_error_message'] = isset($data['last_error_message']) ? $data['last_error_message'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets total_attempts
     * @return int
     */
    public function getTotalAttempts()
    {
        return $this->container['total_attempts'];
    }

    /**
     * Sets total_attempts
     * @param int $total_attempts
     * @return $this
     */
    public function setTotalAttempts($total_attempts)
    {
        $this->container['total_attempts'] = $total_attempts;

        return $this;
    }

    /**
     * Gets total_successes
     * @return int
     */
    public function getTotalSuccesses()
    {
        return $this->container['total_successes'];
    }

    /**
     * Sets total_successes
     * @param int $total_successes
     * @return $this
     */
    public function setTotalSuccesses($total_successes)
    {
        $this->container['total_successes'] = $total_successes;

        return $this;
    }

    /**
     * Gets total_failures
     * @return int
     */
    public function getTotalFailures()
    {
        return $this->container['total_failures'];
    }

    /**
     * Sets total_failures
     * @param int $total_failures
     * @return $this
     */
    public function setTotalFailures($total_failures)
    {
        $this->container['total_failures'] = $total_failures;

        return $this;
    }

    /**
     * Gets failed
     * @return bool
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     * @param bool $failed
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets last_success
     * @return string
     */
    public function getLastSuccess()
    {
        return $this->container['last_success'];
    }

    /**
     * Sets last_success
     * @param string $last_success
     * @return $this
     */
    public function setLastSuccess($last_success)
    {
        $this->container['last_success'] = $last_success;

        return $this;
    }

    /**
     * Gets last_failure
     * @return string
     */
    public function getLastFailure()
    {
        return $this->container['last_failure'];
    }

    /**
     * Sets last_failure
     * @param string $last_failure
     * @return $this
     */
    public function setLastFailure($last_failure)
    {
        $this->container['last_failure'] = $last_failure;

        return $this;
    }

    /**
     * Gets last_http_error_code
     * @return string
     */
    public function getLastHttpErrorCode()
    {
        return $this->container['last_http_error_code'];
    }

    /**
     * Sets last_http_error_code
     * @param string $last_http_error_code
     * @return $this
     */
    public function setLastHttpErrorCode($last_http_error_code)
    {
        $this->container['last_http_error_code'] = $last_http_error_code;

        return $this;
    }

    /**
     * Gets last_error_message
     * @return string
     */
    public function getLastErrorMessage()
    {
        return $this->container['last_error_message'];
    }

    /**
     * Sets last_error_message
     * @param string $last_error_message
     * @return $this
     */
    public function setLastErrorMessage($last_error_message)
    {
        $this->container['last_error_message'] = $last_error_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


