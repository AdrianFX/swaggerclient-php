<?php
/**
 * EventsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VonageIntegrationSuite
 *
 * __VonageÂ® Integration Suite__ powered by __gUnify&trade;__.  --------------------------------
 *
 * OpenAPI spec version: v1
 * Contact: gunifydevops@vonage.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.vonage.client.api.VonageIntegrationSuite;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * EventsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.vonage.com/vgis');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EventsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getEvent
     *
     * Get event
     *
     * @param string $id Event ID (required)
     * @return \com.vonage.client.model.VonageIntegrationSuite\Event[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEvent($id)
    {
        list($response) = $this->getEventWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEventWithHttpInfo
     *
     * Get event
     *
     * @param string $id Event ID (required)
     * @return Array of \com.vonage.client.model.VonageIntegrationSuite\Event[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEventWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEvent');
        }
        // parse inputs
        $resourcePath = "/self/events/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.vonage.client.model.VonageIntegrationSuite\Event[]',
                '/self/events/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\com.vonage.client.model.VonageIntegrationSuite\Event[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\Event[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEventsCount
     *
     * Get events count
     *
     * @param string[] $types  (optional)
     * @param int $from_date Default - start of time (optional)
     * @param int $to_date Default - now (optional)
     * @param string[] $direction Filter by direction. Default - all (optional)
     * @param string[] $states Filter by state. (optional)
     * @return \com.vonage.client.model.VonageIntegrationSuite\EventsCount
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEventsCount($types = null, $from_date = null, $to_date = null, $direction = null, $states = null)
    {
        list($response) = $this->getEventsCountWithHttpInfo($types, $from_date, $to_date, $direction, $states);
        return $response;
    }

    /**
     * Operation getEventsCountWithHttpInfo
     *
     * Get events count
     *
     * @param string[] $types  (optional)
     * @param int $from_date Default - start of time (optional)
     * @param int $to_date Default - now (optional)
     * @param string[] $direction Filter by direction. Default - all (optional)
     * @param string[] $states Filter by state. (optional)
     * @return Array of \com.vonage.client.model.VonageIntegrationSuite\EventsCount, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEventsCountWithHttpInfo($types = null, $from_date = null, $to_date = null, $direction = null, $states = null)
    {
        // parse inputs
        $resourcePath = "/self/events/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if (is_array($types)) {
            $types = $this->apiClient->getSerializer()->serializeCollection($types, 'csv', true);
        }
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }
        // query params
        if (is_array($direction)) {
            $direction = $this->apiClient->getSerializer()->serializeCollection($direction, 'csv', true);
        }
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // query params
        if (is_array($states)) {
            $states = $this->apiClient->getSerializer()->serializeCollection($states, 'csv', true);
        }
        if ($states !== null) {
            $queryParams['states'] = $this->apiClient->getSerializer()->toQueryValue($states);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.vonage.client.model.VonageIntegrationSuite\EventsCount',
                '/self/events/count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\com.vonage.client.model.VonageIntegrationSuite\EventsCount', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\EventsCount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listEvents
     *
     * List events
     *
     * @param string[] $types  (optional)
     * @param int $from_date Default - start of time (optional)
     * @param int $to_date Default - now (optional)
     * @param string[] $direction Filter by direction. Default - all (optional)
     * @param string[] $states Filter by state. (Mix SMS/CALL states) (optional)
     * @param int $offset Page number, from beginning (optional)
     * @param int $size Page size - number of records to return (default 20) (optional)
     * @param string $order Defalt - descending (optional)
     * @param string $sort Sort property (optional)
     * @return \com.vonage.client.model.VonageIntegrationSuite\Event[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listEvents($types = null, $from_date = null, $to_date = null, $direction = null, $states = null, $offset = null, $size = null, $order = null, $sort = null)
    {
        list($response) = $this->listEventsWithHttpInfo($types, $from_date, $to_date, $direction, $states, $offset, $size, $order, $sort);
        return $response;
    }

    /**
     * Operation listEventsWithHttpInfo
     *
     * List events
     *
     * @param string[] $types  (optional)
     * @param int $from_date Default - start of time (optional)
     * @param int $to_date Default - now (optional)
     * @param string[] $direction Filter by direction. Default - all (optional)
     * @param string[] $states Filter by state. (Mix SMS/CALL states) (optional)
     * @param int $offset Page number, from beginning (optional)
     * @param int $size Page size - number of records to return (default 20) (optional)
     * @param string $order Defalt - descending (optional)
     * @param string $sort Sort property (optional)
     * @return Array of \com.vonage.client.model.VonageIntegrationSuite\Event[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function listEventsWithHttpInfo($types = null, $from_date = null, $to_date = null, $direction = null, $states = null, $offset = null, $size = null, $order = null, $sort = null)
    {
        // parse inputs
        $resourcePath = "/self/events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if (is_array($types)) {
            $types = $this->apiClient->getSerializer()->serializeCollection($types, 'csv', true);
        }
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }
        // query params
        if (is_array($direction)) {
            $direction = $this->apiClient->getSerializer()->serializeCollection($direction, 'csv', true);
        }
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // query params
        if (is_array($states)) {
            $states = $this->apiClient->getSerializer()->serializeCollection($states, 'csv', true);
        }
        if ($states !== null) {
            $queryParams['states'] = $this->apiClient->getSerializer()->toQueryValue($states);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = $this->apiClient->getSerializer()->toQueryValue($size);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = $this->apiClient->getSerializer()->toQueryValue($order);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.vonage.client.model.VonageIntegrationSuite\Event[]',
                '/self/events'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\com.vonage.client.model.VonageIntegrationSuite\Event[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\Event[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.vonage.client.model.VonageIntegrationSuite\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
